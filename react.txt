[ REACT ] 
React was created in 2011 by jordan Wlake , an engineer working at facebook ata the time
 
📛 What is  React.?
    ☑️ Extreamly popular, declarative, component-based, 
        state-driven, javascript library for building user interfaces,created by facebook
        👉 Component are the building blocks of user interfaces in React 
            such as button input .. so on.
        👉 declarative syntax called jsx -> 
            telling react what a component should look like  based on current  data/state
            👉 JSX: a syntax that combines HTML CSS Javascript as well as referencing other components

    ☑️ React is good at two things
        1️⃣. Rendering component on a webpage (ui) based on their current state
        2️⃣. keeping the Ui is sync with state, by re-rendering (reacting) when state changes 

    ☑️ IMPERATIVE  ➡️ JAVASCRIPT
        👉 Manual Dom element selections and DOm traversing.
        👉 Step-by-step Dom mutations until we reach the desired UI

    ☑️ DECLARATIVE ➡️ RECT
        👉 describe what UI Should look like using JSX,based on current data
        👉 React is an abstraction away from DOM: we never touch the DOM
        👉 Instead, we think of the ui as a reflection of the current data

📛 Props
        👉 props are used to pass data from parent component to child components (doen the component tree)
        👉 Essential tool to configure and customize components (like function parameter)
        👉 with props. parent components control how child component look and work
        👉 Anything can be passed as props : single values, arrays,objects,functions,even other components

        Props: is data comming from the outside , and can only be updated by the parent component
        State: is internal data that can be updated by the component's logic

        Props are immutable :: read only
        Mutating props would affect parent, creating side effect (not pure)
        this allows react to optimize apps avoid bugs, make apps predictable
        component have to pure functions in trerms of props and state

💥💥💥💥 ONE WAY DATA FLOW  IN REACT APPLICATION DATA CAN ONLY BE PASSED TO PARENT TO CHILD COMPONENT ONLY TOP TO BOTTOM
    REASON ::
        👍 ...make applications more predictable and easier to understand
        👍 ...make applications easier to debug.as we have more control over the data
        👍 ...is more performant


📛 what is STATE in React?
   Component memory 
   imp :: we have to top level in r react component function 

   Sate :internal data, owned by component
   props :external data, owned by parent component


   Useful Resources for Part 2
Here are some high-quality resources that you might find helpful while studying this Part 2. (The list follows the order of sections in this part)

These resources are 100% optional, but might give you additional insights or provide ever deeper dives into some topics.

👉 Writing Resilient Components (By Dan Abramov from the React team)  https://overreacted.io/writing-resilient-components/?ref=jonas.io

👉 Things I think about when I write React code (GitHub repository) https://github.com/mithi/react-philosophies?ref=jonas.io

👉 A (Mostly) Complete Guide to React Rendering Behavior (By Mark Erikson from the redux team) https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/?ref=jonas.io

👉 A Visual Guide to React Rendering (A multi-part series, check out the other ones) https://alexsidorenko.com/blog/react-render-always-rerenders/?ref=jonas.io

👉 Inside Fiber: in-depth overview of the new reconciliation algorithm in React https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react?ref=jonas.io

👉 A Cartoon Intro to Fiber (YouTube video) https://www.youtube.com/watch?v=ZCuYPiUIONs

👉 What Is React Fiber? React.js Deep Dive (YouTube video) https://levelup.gitconnected.com/how-exactly-does-react-handles-events-71e8b5e359f2

👉 The React and React Native Event System Explained  https://levelup.gitconnected.com/how-exactly-does-react-handles-events-71e8b5e359f2

👉 Under the hood of event listeners in React https://the-guild.dev/blog/react-hooks-system?ref=jonas.io

👉 A DIY guide to build your own React https://github.com/pomber/didact?ref=jonas.io

👉 useSyncExternalStore First Look https://julesblom.com/writing/usesyncexternalstore?ref=jonas.io

👉 Under the hood of React's hooks system https://the-guild.dev/blog/react-hooks-system?ref=jonas.io

👉 Why Do React Hooks Rely on Call Order ? (By Dan Abramov ) https://overreacted.io/why-do-hooks-rely-on-call-order/?ref=jonas.io

👉 So you think you know everything about React refs https://blog.thoughtspile.tech/2021/05/17/everything-about-react-refs/?ref=jonas.io

👉 react-use: Reusable React Hook Library (GitHub repository) https://github.com/streamich/react-use?ref=jonas.io

👉 react-hookz: React hooks done right (GitHub repository) https://github.com/react-hookz/web?ref=jonas.io



I will try to keep this list updated over time. If you have additional suggestions, please add them to the Q&A of this lecture.